---
import PageLayout from "@/layouts/Base.astro";
import { Icon } from "astro-icon/components";

const meta = {
	description:
		"Meet the amazing contributors who make Aurras possible. Our community of developers, designers, and music enthusiasts drive the project forward.",
	title: "Contributors",
};

// GitHub repository configuration - these would be set dynamically in a real implementation
const GITHUB_OWNER = "aurras-official";
const GITHUB_REPO = "Aurras";

// Cache configuration
const CACHE_DURATION = 1000 * 60 * 15; // 15 minutes
const CACHE_KEY = `contributors-${GITHUB_OWNER}-${GITHUB_REPO}`;

// Simple in-memory cache (for build-time)
let contributorsCache: { data: ContributorData[]; timestamp: number } | null = null;

// Types for GitHub API responses
interface GitHubContributor {
	login: string;
	id: number;
	avatar_url: string;
	html_url: string;
	contributions: number;
	type: string;
}

interface GitHubUser {
	login: string;
	name: string | null;
	avatar_url: string;
	bio: string | null;
	blog: string | null;
	company: string | null;
	location: string | null;
	created_at: string;
	public_repos: number;
	followers: number;
	following: number;
}

interface ContributorData {
	name: string;
	username: string;
	avatar: string;
	role: string;
	contributions: {
		commits: number;
		issues: number;
		prs: number;
		reviews: number;
	};
	specialties: string[];
	joinedDate: string;
	isCore: boolean;
	celestialType: 'blackhole' | 'star' | 'planet' | 'moon';
	githubProfile?: GitHubUser;
}

// Function to determine celestial type based on contributions and username
function getCelestialType(commits: number, username: string): 'blackhole' | 'star' | 'planet' | 'moon' {
	// Special case: aurras-official is always the black hole at center
	if (username === 'aurras-official') {
		return 'blackhole';
	}
	
	// Hierarchy for other contributors based on commits
	if (commits >= 100) return 'star';
	if (commits >= 20) return 'planet';
	return 'moon';
}

// Function to determine role based on contributions
function determineRole(contributor: GitHubContributor): string {
	const { contributions, login } = contributor;
	
	// Owner/Creator
	if (login === GITHUB_OWNER) {
		return "Creator & Lead Developer";
	}
	
	// High contributors
	if (contributions >= 100) {
		return "Core Developer";
	}
	
	// Medium contributors
	if (contributions >= 20) {
		return "Feature Developer";
	}
	
	// Default roles based on contribution level
	if (contributions >= 10) return "Active Contributor";
	if (contributions >= 5) return "Regular Contributor";
	return "Community Contributor";
}

// Function to determine specialties based on contributions
function determineSpecialties(contributor: GitHubContributor): string[] {
	const { login, contributions } = contributor;
	const specialties: string[] = [];
	
	// Owner gets core specialties
	if (login === GITHUB_OWNER) {
		return ["Core Architecture", "Audio Processing", "UI/UX", "Project Leadership"];
	}
	
	// Based on contribution level
	if (contributions >= 50) {
		specialties.push("Core Development");
	}
	
	if (contributions >= 20) {
		specialties.push("Feature Development");
	}
	
	// Default specialties based on contribution level
	if (specialties.length === 0) {
		if (contributions >= 20) {
			specialties.push("Code Contributions", "Bug Fixes");
		} else if (contributions >= 5) {
			specialties.push("Bug Reports", "Testing");
		} else {
			specialties.push("Community Support");
		}
	}
	
	return specialties.slice(0, 3); // Limit to 3 specialties
}

// Fetch contributors from GitHub API
async function fetchContributors(): Promise<ContributorData[]> {
	// Check cache first
	if (contributorsCache && (Date.now() - contributorsCache.timestamp) < CACHE_DURATION) {
		console.log('Using cached contributor data');
		return contributorsCache.data;
	}

	try {
		// Prepare headers with optional authentication
		const headers: Record<string, string> = {
			'Accept': 'application/vnd.github.v3+json',
			'User-Agent': 'Aurras-Website'
		};
		
		// Add GitHub token if available (for higher rate limits)
		const githubToken = import.meta.env.GITHUB_TOKEN || process.env.GITHUB_TOKEN;
		if (githubToken) {
			headers['Authorization'] = `token ${githubToken}`;
		}

		// Fetch contributors from GitHub API
		const contributorsResponse = await fetch(
			`https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/contributors?per_page=50`,
			{ headers }
		);

		if (!contributorsResponse.ok) {
			console.warn(`GitHub API error: ${contributorsResponse.status} - ${contributorsResponse.statusText}`);
			if (contributorsResponse.status === 403) {
				console.warn('GitHub API rate limit exceeded. Consider adding a GITHUB_TOKEN environment variable for higher rate limits.');
			}
			throw new Error(`GitHub API error: ${contributorsResponse.status}`);
		}

		const githubContributors: GitHubContributor[] = await contributorsResponse.json();
		
		// Transform basic contributor data (no need for detailed profiles)
		const contributorsWithProfiles = githubContributors.map((contributor) => {
			const contributorData: ContributorData = {
				name: contributor.login, // Use username as name
				username: contributor.login,
				avatar: contributor.avatar_url,
				role: determineRole(contributor),
				contributions: {
					commits: contributor.contributions,
					issues: 0, // GitHub API doesn't provide this easily
					prs: 0,    // Would need separate API call
					reviews: 0 // Would need separate API call
				},
				specialties: determineSpecialties(contributor),
				joinedDate: new Date().toISOString(), // Fallback date
				isCore: contributor.contributions >= 50 || contributor.login === GITHUB_OWNER,
				celestialType: getCelestialType(contributor.contributions, contributor.login)
			};
			
			return contributorData;
		});

		// Update cache
		contributorsCache = {
			data: contributorsWithProfiles,
			timestamp: Date.now()
		};

		console.log(`Fetched and cached ${contributorsWithProfiles.length} contributors from GitHub`);
		return contributorsWithProfiles;
		
	} catch (error) {
		console.error('Failed to fetch contributors from GitHub:', error);
		console.log('Using empty fallback data...');
		
		// Return empty array - in a real implementation this could load from a local file or database
		return [];
	}
}

// Fetch contributors data
const contributors = await fetchContributors();

const totalContributors = contributors.length;
const totalCommits = contributors.reduce((sum, c) => sum + c.contributions.commits, 0);
const totalIssues = contributors.reduce((sum, c) => sum + c.contributions.issues, 0);
const totalPRs = contributors.reduce((sum, c) => sum + c.contributions.prs, 0);

// Additional GitHub-derived stats
const coreContributors = contributors.filter(c => c.isCore).length;
const blackholeContributors = contributors.filter(c => c.celestialType === 'blackhole').length;
const starContributors = contributors.filter(c => c.celestialType === 'star').length;
const planetContributors = contributors.filter(c => c.celestialType === 'planet').length;
const moonContributors = contributors.filter(c => c.celestialType === 'moon').length;
---

<PageLayout meta={meta}>
	<h1 class="title mb-6 text-center flex items-center justify-center">
		<Icon class="h-8 w-8 text-accent-base mr-3" name="solar:users-group-rounded-bold" />
		Contributors
	</h1>

	<div class="max-w-none">
		<div class="text-center mb-12">
			<p class="text-base sm:text-lg mb-8 text-light">
				Meet the amazing people who make Aurras possible. Our community of developers, 
				designers, and music enthusiasts collaborate to create the ultimate terminal music experience.
			</p>
		</div>

		<!-- Interactive Contribution Galaxy -->
		<div class="mb-16 relative">
			<!-- Ambient space glow -->
			<div class="absolute inset-0 bg-gradient-to-b from-transparent via-slate-900/20 to-transparent blur-3xl"></div>
			
			<h2 class="title text-3xl font-bold mb-8 text-center relative z-10">
				Contribution Galaxy
			</h2>
			<p class="text-base sm:text-lg text-center mb-8 text-light relative z-10">
				Explore our contributor constellation. Each celestial body represents a team member, 
				floating through space with their unique contribution energy.
			</p>

			<!-- Live Data Notice -->
			<!-- <div class="text-center mb-8">
				<div class="inline-flex items-center gap-2 px-4 py-2 bg-green-500/10 border border-green-500/20 rounded-lg text-green-400 text-sm">
					<div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
					Live data from GitHub â€¢ Updated automatically
				</div>
			</div> -->

			<!-- Celestial Categories Legend -->
			<div class="flex justify-center mb-8 px-2 relative z-10">
				<div class="flex flex-col sm:flex-row items-center gap-3 sm:gap-6 p-4 rounded-lg bg-gradient-to-r from-black/20 via-black/30 to-black/20 backdrop-blur-sm border border-white/10 w-full max-w-4xl">
					<div class="flex items-center gap-2">
						<div class="w-8 h-8 rounded-full bg-gradient-to-r from-black via-purple-900 to-black border-2 border-purple-500/50 relative">
							<div class="absolute inset-0 rounded-full animate-pulse bg-purple-400/30"></div>
							<div class="absolute inset-2 rounded-full bg-black animate-spin border border-purple-500/30"></div>
						</div>
						<span class="text-sm text-light">
							<span class="text-purple-400 font-semibold">Black Hole</span> (Creator)
						</span>
					</div>
					<div class="flex items-center gap-2">
						<div class="w-6 h-6 rounded-full bg-gradient-to-r from-yellow-400 to-orange-500 relative">
							<div class="absolute inset-0 rounded-full animate-pulse bg-yellow-300/50"></div>
						</div>
						<span class="text-sm text-light">
							<span class="text-yellow-400 font-semibold">Stars</span> (100+ commits)
						</span>
					</div>
					<div class="flex items-center gap-2">
						<div class="w-5 h-5 rounded-full bg-gradient-to-r from-blue-400 to-purple-500"></div>
						<span class="text-sm text-light">
							<span class="text-blue-400 font-semibold">Planets</span> (20-99 commits)
						</span>
					</div>
					<div class="flex items-center gap-2">
						<div class="w-4 h-4 rounded-full bg-gradient-to-r from-gray-300 to-gray-500"></div>
						<span class="text-sm text-light">
							<span class="text-gray-300 font-semibold">Moons</span> (1-19 commits)
						</span>
					</div>
				</div>
			</div>
			<div class="galaxy-container relative overflow-hidden" style="height: 600px;">
				<!-- Galaxy Controls -->
				<div class="galaxy-controls absolute top-4 right-4 z-20 flex flex-col gap-2">
					<button 
						id="zoom-in" 
						class="w-10 h-10 bg-black/50 hover:bg-black/70 border border-white/20 rounded-lg flex items-center justify-center text-white transition-all"
						title="Zoom In"
					>
						<Icon class="w-5 h-5" name="solar:add-circle-bold" />
					</button>
					<button 
						id="zoom-out" 
						class="w-10 h-10 bg-black/50 hover:bg-black/70 border border-white/20 rounded-lg flex items-center justify-center text-white transition-all"
						title="Zoom Out"
					>
						<Icon class="w-5 h-5" name="solar:minus-circle-bold" />
					</button>
					<button 
						id="reset-view" 
						class="w-10 h-10 bg-black/50 hover:bg-black/70 border border-white/20 rounded-lg flex items-center justify-center text-white transition-all"
						title="Reset View"
					>
						<Icon class="w-5 h-5" name="solar:home-2-bold" />
					</button>
				</div>

				<!-- Animated Background -->
				<div class="absolute inset-0 galaxy-bg"></div>
				
				<!-- Floating Particles -->
				<div class="particles-container absolute inset-0">
					{Array.from({ length: 50 }, (_, i) => (
						<div 
							class="particle"
							style={`
								left: ${Math.random() * 100}%;
								top: ${Math.random() * 100}%;
								animation-delay: ${Math.random() * 10}s;
								animation-duration: ${3 + Math.random() * 4}s;
							`}
						></div>
					))}
				</div>

				<!-- Connection Lines -->
				<svg class="absolute inset-0 w-full h-full pointer-events-none" id="connection-lines">
					<!-- Lines will be dynamically drawn here -->
				</svg>

				<!-- Explorable Galaxy Space -->
				<div 
					id="galaxy-space" 
					class="absolute inset-0 w-full h-full"
					style="
						transform-origin: center center;
						transform: scale(1) translate(0px, 0px);
						transition: transform 0.3s ease-out;
						cursor: grab;
					"
				>
					<!-- Floating Contributors -->
					<div class="relative w-full h-full">
						{(() => {
							// Create a black hole centered celestial system with aurras-official at center
							// Find the aurras-official contributor (marked as blackhole type)
							const blackHole = contributors.find(c => c.celestialType === 'blackhole');
						
						const stars = contributors.filter(c => c.celestialType === 'star');
						const planets = contributors.filter(c => c.celestialType === 'planet');
						const moons = contributors.filter(c => c.celestialType === 'moon');
						
						const celestialBodies: any[] = [];
						const containerCenter = { x: 300, y: 300 }; // Center of 600px container
						
						// Place the black hole (Aurras creator) at the absolute center
						if (blackHole) {
							celestialBodies.push({
								contributor: blackHole,
								celestialClass: 'celestial-blackhole',
								orbitRadius: 0,
								isStationary: true,
								position: containerCenter,
								orbitCenter: containerCenter,
								startAngle: 0,
								orbitalPeriod: 0
							});
						}
						
						// Place stars in close, strong orbits around the black hole
						stars.forEach((star, starIndex) => {
							const baseRadius = contributors.length > 10 ? 180 : 150; // Increased distance from black hole
							const orbitRadius = baseRadius + (starIndex * (contributors.length > 20 ? 60 : 40)); // Increased spacing
							const startAngle = (starIndex * 72) % 360; // Evenly distributed
							const orbitalPeriod = 30 + (orbitRadius / 10); // Fast, strong orbits
							
							celestialBodies.push({
								contributor: star,
								celestialClass: 'celestial-star',
								orbitRadius,
								parentType: 'blackhole',
								orbitCenter: containerCenter,
								isStationary: false,
								startAngle,
								orbitalPeriod
							});
						});
						
						// Place planets in medium orbits - they orbit around stars or black hole
						planets.forEach((planet, planetIndex) => {
							let parentCenter = containerCenter;
							let parentType = 'blackhole';
							let baseOrbitRadius = contributors.length > 15 ? 300 : 250; // Increased base radius for planets around black hole
							
							// If there are stars, some planets can orbit around them
							if (stars.length > 0 && planetIndex % 2 === 0) {
								const parentstar = stars[planetIndex % stars.length];
								const parentstarBody = celestialBodies.find(b => b.contributor === parentstar);
								if (parentstarBody) {
									parentCenter = parentstarBody.orbitCenter;
									parentType = 'star';
									baseOrbitRadius = contributors.length > 20 ? 100 : 80; // Increased orbit around stars
								}
							}
							
							const orbitRadius = baseOrbitRadius + (planetIndex * (contributors.length > 25 ? 60 : 45)); // Increased spacing
							const startAngle = (planetIndex * 137.5) % 360; // Golden angle
							const orbitalPeriod = 50 + (orbitRadius / 12); // Medium speed
							
							celestialBodies.push({
								contributor: planet,
								celestialClass: 'celestial-planet',
								orbitRadius,
								parentType,
								orbitCenter: parentCenter,
								isStationary: false,
								startAngle,
								orbitalPeriod
							});
						});
						
						// Place moons in outer, slow orbits - they orbit around planets or distant from center
						moons.forEach((moon, moonIndex) => {
							let parentCenter = containerCenter;
							let parentType = 'blackhole';
							let baseOrbitRadius = contributors.length > 20 ? 400 : 350; // Increased base radius for moons around black hole
							
							// Moons can orbit around planets if available
							if (planets.length > 0) {
								const parentPlanet = planets[moonIndex % planets.length];
								const parentPlanetBody = celestialBodies.find(b => b.contributor === parentPlanet);
								if (parentPlanetBody) {
									parentCenter = parentPlanetBody.orbitCenter;
									parentType = 'planet';
									baseOrbitRadius = 60; // Increased distance from planets
								}
							}
							
							const orbitRadius = baseOrbitRadius + (moonIndex * 35); // Increased spacing between moons
							const startAngle = (moonIndex * 120 + moonIndex * 45) % 360; // Scattered distribution
							const orbitalPeriod = 70 + (orbitRadius / 8); // Slow, weak orbits
							
							celestialBodies.push({
								contributor: moon,
								celestialClass: 'celestial-moon',
								orbitRadius,
								parentType,
								orbitCenter: parentCenter,
								isStationary: false,
								startAngle,
								orbitalPeriod
							});
						});
						
						return celestialBodies;
					})().map((body, index) => {
						const { contributor, celestialClass, orbitRadius, isStationary, position, orbitCenter, startAngle, orbitalPeriod } = body;
						
						// Calculate positioning with proper offsets for each celestial type
						let positionStyle = '';
						let offset = 30; // Default offset for center positioning
						
						// Adjust offset based on celestial type size
						if (contributor.celestialType === 'blackhole') offset = 50; // 100px / 2
						else if (contributor.celestialType === 'sun') offset = 40;    // 80px / 2  
						else if (contributor.celestialType === 'planet') offset = 30; // 60px / 2
						else if (contributor.celestialType === 'moon') offset = 20;   // 40px / 2
						
						if (isStationary && position) {
							// Stationary bodies at their assigned position
							positionStyle = `left: ${position.x - offset}px; top: ${position.y - offset}px;`;
						} else if (orbitCenter) {
							// Orbiting bodies - positioned at their orbit center, CSS animation handles the actual orbit
							positionStyle = `left: ${orbitCenter.x - offset}px; top: ${orbitCenter.y - offset}px;`;
						} else {
							// Fallback to center
							positionStyle = `left: calc(50% - ${offset}px); top: calc(50% - ${offset}px);`;
						}
						
						return (
							<div 
								class={`floating-contributor ${celestialClass}`}
								style={`
									${positionStyle}
									animation-delay: ${startAngle ? (startAngle / 360) * (orbitalPeriod || 40) : index * 0.3}s;
									--orbit-radius: ${orbitRadius}px;
									--orbit-center-x: ${orbitCenter?.x || 300}px;
									--orbit-center-y: ${orbitCenter?.y || 300}px;
									--orbital-period: ${orbitalPeriod || 40}s;
									--start-angle: ${startAngle || 0}deg;
								`}
								data-contributor-id={index}
								data-commits={contributor.contributions.commits}
								data-orbit-radius={orbitRadius}
								data-celestial-type={contributor.celestialType}
							>
								<!-- Glowing Orb -->
								<div class="contributor-orb">
									<div class="orb-glow"></div>
									<div class="orb-core">
										<img 
											src={contributor.avatar} 
											alt={contributor.name}
											class="avatar-img"
										/>
									</div>
									{contributor.isCore && (
										<div class="core-ring"></div>
									)}
								</div>

								<!-- Floating Info Card -->
								<div class="contributor-card">
									<div class="card-content">
										<div class="flex items-center gap-3 mb-3">
											<img 
												src={contributor.avatar} 
												alt={contributor.name}
												class="w-12 h-12 rounded-full border-2 border-accent-base/50"
											/>
											<div>
												<h3 class="text-lg font-bold text-accent-base">{contributor.name}</h3>
												<p class="text-sm text-accent-two">@{contributor.username}</p>
											</div>
											<div class="ml-auto flex gap-2">
												<!-- Celestial Type Badge -->
												{contributor.celestialType === 'blackhole' && (
													<div class="px-2 py-1 bg-purple-500/20 text-purple-400 rounded-full text-xs font-medium flex items-center gap-1">
														<Icon class="h-3 w-3" name="solar:tornado-bold" />
														Black Hole
													</div>
												)}
												{contributor.celestialType === 'star' && (
													<div class="px-2 py-1 bg-yellow-400/20 text-yellow-400 rounded-full text-xs font-medium flex items-center gap-1">
														<Icon class="h-3 w-3" name="solar:star-bold" />
														star
													</div>
												)}
												{contributor.celestialType === 'planet' && (
													<div class="px-2 py-1 bg-blue-400/20 text-blue-400 rounded-full text-xs font-medium flex items-center gap-1">
														<Icon class="h-3 w-3" name="solar:planet-bold" />
														Planet
													</div>
												)}
												{contributor.celestialType === 'moon' && (
													<div class="px-2 py-1 bg-gray-300/20 text-gray-300 rounded-full text-xs font-medium flex items-center gap-1">
														<Icon class="h-3 w-3" name="solar:moon-bold" />
														Moon
													</div>
												)}
												{contributor.isCore && (
													<div class="px-2 py-1 bg-accent-one/20 text-accent-one rounded-full text-xs font-medium flex items-center gap-1">
														<Icon class="h-3 w-3" name="solar:star-bold" />
														Core
													</div>
												)}
											</div>
										</div>

										<p class="text-sm text-light mb-3">{contributor.role}</p>

										<!-- Contribution Stats with animated bars -->
										<div class="space-y-2 mb-3">
											<div class="stat-bar">
												<span class="text-xs text-light">Commits</span>
												<div class="bar-container">
													<div 
														class="bar-fill commits-bar"
														style={`width: ${(contributor.contributions.commits / Math.max(...contributors.map(c => c.contributions.commits))) * 100}%`}
													></div>
													<span class="text-xs font-medium text-accent-one">{contributor.contributions.commits}</span>
												</div>
											</div>
											{contributor.githubProfile && (
												<div class="stat-bar">
													<span class="text-xs text-light">Repos</span>
													<div class="bar-container">
														<div 
															class="bar-fill prs-bar"
															style={`width: ${Math.min((contributor.githubProfile.public_repos / 50) * 100, 100)}%`}
														></div>
														<span class="text-xs font-medium text-accent-two">{contributor.githubProfile.public_repos}</span>
													</div>
												</div>
											)}
										</div>

										<!-- GitHub Profile Info -->
										<div class="mb-3">
											<span class="text-xs text-light flex items-center gap-1">
												<Icon class="h-3 w-3" name="solar:user-bold" />
												GitHub Contributor
											</span>
										</div>

										<!-- Specialties -->
										<div class="mb-3">
											<div class="flex flex-wrap gap-1">
												{contributor.specialties.slice(0, 2).map((specialty: string) => (
													<span class="px-2 py-1 text-xs rounded-full bg-accent-base/10 text-accent-base">
														{specialty}
													</span>
												))}
											</div>
										</div>						<!-- GitHub Link -->
						<a 
							href={`https://github.com/${contributor.username}`}
							class="flex items-center gap-2 text-accent-base hover:text-accent-one transition-colors text-sm"
							target="_blank"
							rel="noopener noreferrer"
						>
							<Icon class="w-4 h-4" name="solar:link-bold" />
							View GitHub Profile
						</a>
									</div>
								</div>

								<!-- Contribution Particles -->
								<div class="contribution-particles">
									{Array.from({ length: contributor.contributions.commits > 50 ? 8 : 4 }, (_, i) => (
										<div 
											class="contrib-particle"
											style={`animation-delay: ${i * 0.3}s`}
										></div>
									))}
								</div>
							</div>
						);
					})}
					</div>
				</div>

			</div>
		</div>

		<!-- How to Contribute Section -->
		<div class="p-6 sm:p-8 text-center rounded-lg bg-gradient-to-r from-accent-one/10 to-accent-two/10 border border-accent-one/20">
			<h2 class="text-2xl sm:text-3xl font-bold mb-4">
				Join Our Symphony
			</h2>
			<p class="text-base sm:text-lg mb-6">
				Ready to contribute to Aurras? Whether you're a developer, designer, or music enthusiast, 
				there's a place for you in our community.
			</p>
			<div class="flex flex-col sm:flex-row justify-center gap-3 sm:gap-4">
				<a 
					href={`https://github.com/${GITHUB_OWNER}/${GITHUB_REPO}`} 
					class="inline-flex items-center px-6 py-3 rounded-lg bg-gradient-to-r from-accent-one to-accent-two text-bgColor font-semibold hover:brightness-110 transition-all text-sm sm:text-base"
					target="_blank"
					rel="noopener noreferrer"
				>
					<Icon class="w-5 h-5 mr-2" name="solar:code-bold" />
					View on GitHub
				</a>
				<a 
					href={`https://github.com/${GITHUB_OWNER}/${GITHUB_REPO}/blob/main/CONTRIBUTING.md`} 
					class="inline-flex items-center px-6 py-3 rounded-lg border border-accent-one text-accent-one hover:bg-accent-one/10 transition-all text-sm sm:text-base"
					target="_blank"
					rel="noopener noreferrer"
				>
					<Icon class="w-5 h-5 mr-2" name="solar:document-text-bold" />
					Contributing Guide
				</a>
			</div>
		</div>
	</div>
</PageLayout>

<style>
	/* Galaxy Container */
	.galaxy-container {
		background: 
			radial-gradient(ellipse at center, rgba(26, 26, 46, 0.8) 0%, rgba(22, 33, 62, 0.6) 35%, rgba(15, 23, 42, 0.4) 70%, transparent 100%),
			linear-gradient(to bottom, transparent 0%, rgba(15, 23, 42, 0.1) 50%, transparent 100%);
		border: none;
		position: relative;
		overflow: hidden;
		display: flex;
		align-items: center;
		justify-content: center;
		mask: linear-gradient(to bottom, transparent 0%, black 10%, black 90%, transparent 100%);
		-webkit-mask: linear-gradient(to bottom, transparent 0%, black 10%, black 90%, transparent 100%);
	}

	/* Kurzgesagt-style Animated Background */
	.galaxy-bg {
		background: 
			/* Random scattered star field - no grid pattern */
			radial-gradient(1px 1px at 23% 17%, rgba(255, 224, 102, 0.9), transparent 2px),
			radial-gradient(2px 2px at 67% 31%, rgba(255, 107, 107, 0.7), transparent 3px),
			radial-gradient(1px 1px at 89% 43%, rgba(69, 183, 209, 0.6), transparent 2px),
			radial-gradient(1.5px 1.5px at 12% 76%, rgba(78, 205, 196, 0.5), transparent 2px),
			radial-gradient(1px 1px at 45% 89%, rgba(150, 206, 180, 0.4), transparent 2px),
			radial-gradient(2px 2px at 78% 21%, rgba(255, 234, 167, 0.8), transparent 3px),
			radial-gradient(1px 1px at 34% 55%, rgba(255, 193, 7, 0.6), transparent 2px),
			radial-gradient(1.5px 1.5px at 91% 67%, rgba(255, 152, 0, 0.5), transparent 2px),
			radial-gradient(1px 1px at 15% 38%, rgba(220, 231, 117, 0.4), transparent 2px),
			radial-gradient(2px 2px at 56% 14%, rgba(255, 107, 107, 0.6), transparent 3px),
			radial-gradient(1px 1px at 82% 85%, rgba(69, 183, 209, 0.5), transparent 2px),
			radial-gradient(1px 1px at 29% 92%, rgba(150, 206, 180, 0.3), transparent 2px),
			/* Kurzgesagt nebula colors */
			linear-gradient(135deg, 
				rgba(255, 107, 107, 0.08) 0%, 
				rgba(69, 183, 209, 0.12) 25%, 
				rgba(78, 205, 196, 0.08) 50%, 
				rgba(255, 224, 102, 0.1) 75%, 
				rgba(150, 206, 180, 0.06) 100%),
			/* Deep space gradient */
			radial-gradient(ellipse at center, 
				rgba(18, 18, 52, 0.9) 0%, 
				rgba(13, 13, 35, 0.95) 40%, 
				rgba(8, 8, 20, 1) 100%);
		background-size: 100% 100%;
		background-repeat: no-repeat;
		animation: kurzgesagt-space-twinkle 10s ease-in-out infinite alternate,
		           kurzgesagt-space-gentle-drift 120s linear infinite;
	}

	@keyframes twinkle {
		0% { opacity: 0.3; }
		50% { opacity: 0.8; }
		100% { opacity: 0.5; }
	}

	/* Floating Particles */
	.particle {
		position: absolute;
		width: 2px;
		height: 2px;
		background: radial-gradient(circle, rgba(139, 92, 246, 0.8) 0%, transparent 70%);
		border-radius: 50%;
		animation: float infinite linear;
		pointer-events: none;
	}

	@keyframes float {
		0% {
			transform: translateY(0px) rotate(0deg);
			opacity: 0;
		}
		10% {
			opacity: 1;
		}
		90% {
			opacity: 1;
		}
		100% {
			transform: translateY(-600px) rotate(360deg);
			opacity: 0;
		}
	}

	/* Floating Contributors */
	.floating-contributor {
		position: absolute;
		cursor: pointer;
		z-index: 10;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Celestial Type Specific Styles with Kurzgesagt-style animations */
	.celestial-blackhole {
		animation: kurzgesagt-blackhole-spin 20s cubic-bezier(0.25, 0.46, 0.45, 0.94) infinite, 
		           kurzgesagt-blackhole-gravity 12s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite alternate,
		           kurzgesagt-blackhole-distort 6s cubic-bezier(0.4, 0, 0.6, 1) infinite;
		position: absolute;
		z-index: 20;
		filter: drop-shadow(0 0 40px rgba(255, 140, 0, 0.9)) 
		        drop-shadow(0 0 80px rgba(255, 193, 7, 0.6)) 
		        drop-shadow(0 0 120px rgba(138, 43, 226, 0.4));
		transform-origin: center center;
	}

	.celestial-star {
		animation: kurzgesagt-star-twinkle 2.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite,
		           kurzgesagt-gentle-bounce 5s cubic-bezier(0.25, 0.46, 0.45, 0.94) infinite alternate,
		           kurzgesagt-star-pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
		position: absolute;
		filter: drop-shadow(0 0 15px rgba(255, 224, 102, 0.8)) drop-shadow(0 0 30px rgba(255, 107, 107, 0.5));
	}

	.celestial-planet {
		animation: kurzgesagt-planet-orbit 50s cubic-bezier(0.25, 0.46, 0.45, 0.94) infinite linear, 
		           kurzgesagt-gentle-bounce 7s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite alternate,
		           kurzgesagt-planet-wobble 4s cubic-bezier(0.25, 0.46, 0.45, 0.94) infinite;
		position: absolute;
		transform-origin: center center;
		filter: drop-shadow(0 0 12px rgba(69, 183, 209, 0.6)) drop-shadow(0 0 20px rgba(78, 205, 196, 0.4));
	}

	.celestial-moon {
		animation: kurzgesagt-moon-float 60s cubic-bezier(0.25, 0.46, 0.45, 0.94) infinite linear,
		           kurzgesagt-gentle-bounce 9s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite alternate,
		           kurzgesagt-moon-shimmer 5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
		position: absolute;
		transform-origin: center center;
		filter: drop-shadow(0 0 8px rgba(150, 206, 180, 0.5)) drop-shadow(0 0 15px rgba(255, 234, 167, 0.3));
	}

	/* Black Hole Animations - Intense gravitational effects */
	@keyframes kurzgesagt-blackhole-spin {
		0% { transform: rotate(0deg) scale(1); }
		25% { transform: rotate(90deg) scale(1.05); }
		50% { transform: rotate(180deg) scale(1.1); }
		75% { transform: rotate(270deg) scale(1.05); }
		100% { transform: rotate(360deg) scale(1); }
	}

	@keyframes kurzgesagt-blackhole-gravity {
		0% { 
			filter: brightness(0.9) contrast(1.2) saturate(1.3);
			box-shadow: 0 0 60px rgba(255, 140, 0, 0.7), 
			           0 0 100px rgba(255, 193, 7, 0.5),
			           inset 0 0 40px rgba(0, 0, 0, 0.8);
		}
		50% { 
			filter: brightness(1.1) contrast(1.5) saturate(1.6);
			box-shadow: 0 0 80px rgba(255, 140, 0, 0.9), 
			           0 0 130px rgba(255, 193, 7, 0.7),
			           0 0 180px rgba(138, 43, 226, 0.4),
			           inset 0 0 60px rgba(0, 0, 0, 1);
		}
		100% { 
			filter: brightness(0.9) contrast(1.2) saturate(1.3);
			box-shadow: 0 0 60px rgba(255, 140, 0, 0.7), 
			           0 0 100px rgba(255, 193, 7, 0.5),
			           inset 0 0 40px rgba(0, 0, 0, 0.8);
		}
	}

	@keyframes kurzgesagt-blackhole-distort {
		0%, 100% { 
			transform: perspective(300px) rotateX(0deg) rotateY(0deg); 
		}
		25% { 
			transform: perspective(300px) rotateX(2deg) rotateY(1deg); 
		}
		50% { 
			transform: perspective(300px) rotateX(0deg) rotateY(2deg); 
		}
		75% { 
			transform: perspective(300px) rotateX(-1deg) rotateY(0deg); 
		}
	}

	@keyframes accretion-disk-spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	@keyframes gravitational-field-spin {
		0% { transform: rotate(0deg) scale(1); }
		25% { transform: rotate(90deg) scale(1.1); }
		50% { transform: rotate(180deg) scale(1.2); }
		75% { transform: rotate(270deg) scale(1.1); }
		100% { transform: rotate(360deg) scale(1); }
	}

	/* star Animations - Gentle floating and pulsing */
	@keyframes star-pulse {
		0%, 100% { transform: scale(1); }
		50% { transform: scale(1.05); }
	}

	/* Planet Animations - Orbit around their assigned star with variable periods */
	@keyframes planet-orbit {
		0% { 
			transform: rotate(var(--start-angle, 0deg)) translateX(var(--orbit-radius, 80px)) rotate(calc(-1 * var(--start-angle, 0deg)));
		}
		100% { 
			transform: rotate(calc(var(--start-angle, 0deg) + 360deg)) translateX(var(--orbit-radius, 80px)) rotate(calc(-1 * (var(--start-angle, 0deg) + 360deg)));
		}
	}

	/* Moon Animations - Faster orbit around their assigned planet/star with variable periods */
	@keyframes moon-orbit {
		0% { 
			transform: rotate(var(--start-angle, 0deg)) translateX(var(--orbit-radius, 40px)) rotate(calc(-1 * var(--start-angle, 0deg)));
		}
		100% { 
			transform: rotate(calc(var(--start-angle, 0deg) + 360deg)) translateX(var(--orbit-radius, 40px)) rotate(calc(-1 * (var(--start-angle, 0deg) + 360deg)));
		}
	}

	/* Gentle floating animation for all bodies */
	@keyframes gentle-float {
		0%, 100% { 
			transform: translateY(0px); 
		}
		50% { 
			transform: translateY(-10px); 
		}
	}

	/* Kurzgesagt-style Keyframe Animations */
	
	/* Black Hole Animations - Hypnotic spinning with gravitational pull */
	@keyframes kurzgesagt-blackhole-spin {
		0% { 
			transform: rotate(0deg) scale(1);
			filter: brightness(0.8) contrast(1.5) hue-rotate(0deg);
		}
		25% { 
			transform: rotate(90deg) scale(1.05);
			filter: brightness(0.9) contrast(1.8) hue-rotate(15deg);
		}
		50% { 
			transform: rotate(180deg) scale(1.1);
			filter: brightness(1) contrast(2) hue-rotate(30deg);
		}
		75% { 
			transform: rotate(270deg) scale(1.05);
			filter: brightness(0.9) contrast(1.8) hue-rotate(15deg);
		}
		100% { 
			transform: rotate(360deg) scale(1);
			filter: brightness(0.8) contrast(1.5) hue-rotate(0deg);
		}
	}

	@keyframes kurzgesagt-blackhole-gravity {
		0%, 100% { 
			box-shadow: 0 0 50px rgba(255, 140, 0, 0.6), 
			           0 0 100px rgba(147, 51, 234, 0.4),
			           inset 0 0 30px rgba(139, 92, 246, 0.3);
		}
		50% { 
			box-shadow: 0 0 80px rgba(255, 140, 0, 0.9), 
			           0 0 150px rgba(147, 51, 234, 0.6),
			           inset 0 0 50px rgba(139, 92, 246, 0.5);
		}
	}

	/* Star Animations - Bright twinkling with cheerful bounce */
	@keyframes kurzgesagt-star-twinkle {
		0%, 100% { 
			transform: scale(1) rotate(0deg);
			filter: brightness(1) saturate(1.2);
			box-shadow: 0 0 15px rgba(255, 224, 102, 0.8),
			           0 0 30px rgba(255, 107, 107, 0.5);
		}
		25% { 
			transform: scale(1.15) rotate(5deg);
			filter: brightness(1.3) saturate(1.5);
			box-shadow: 0 0 25px rgba(255, 224, 102, 1),
			           0 0 45px rgba(255, 107, 107, 0.7);
		}
		50% { 
			transform: scale(1.2) rotate(0deg);
			filter: brightness(1.4) saturate(1.6);
			box-shadow: 0 0 30px rgba(255, 224, 102, 1.2),
			           0 0 50px rgba(255, 107, 107, 0.8);
		}
		75% { 
			transform: scale(1.15) rotate(-5deg);
			filter: brightness(1.3) saturate(1.5);
			box-shadow: 0 0 25px rgba(255, 224, 102, 1),
			           0 0 45px rgba(255, 107, 107, 0.7);
		}
	}

	@keyframes kurzgesagt-star-pulse {
		0%, 100% { transform: scale(1); opacity: 1; }
		25% { transform: scale(1.05); opacity: 0.9; }
		50% { transform: scale(1.1); opacity: 0.8; }
		75% { transform: scale(1.05); opacity: 0.9; }
	}

	/* Planet Animations - Smooth orbital motion with gentle wobble */
	@keyframes kurzgesagt-planet-orbit {
		0% { 
			transform: rotate(var(--start-angle, 0deg)) translateX(var(--orbit-radius, 80px)) rotate(calc(-1 * var(--start-angle, 0deg)));
		}
		100% { 
			transform: rotate(calc(var(--start-angle, 0deg) + 360deg)) translateX(var(--orbit-radius, 80px)) rotate(calc(-1 * (var(--start-angle, 0deg) + 360deg)));
		}
	}

	@keyframes kurzgesagt-planet-wobble {
		0%, 100% { 
			transform: scale(1) skewX(0deg);
			filter: brightness(1) saturate(1.2);
		}
		25% { 
			transform: scale(1.03) skewX(1deg);
			filter: brightness(1.1) saturate(1.3);
		}
		50% { 
			transform: scale(1.05) skewX(0deg);
			filter: brightness(1.15) saturate(1.4);
		}
		75% { 
			transform: scale(1.03) skewX(-1deg);
			filter: brightness(1.1) saturate(1.3);
		}
	}

	/* Moon Animations - Delicate floating with shimmer */
	@keyframes kurzgesagt-moon-float {
		0% { 
			transform: rotate(var(--start-angle, 0deg)) translateX(var(--orbit-radius, 120px)) rotate(calc(-1 * var(--start-angle, 0deg)));
		}
		100% { 
			transform: rotate(calc(var(--start-angle, 0deg) + 360deg)) translateX(var(--orbit-radius, 120px)) rotate(calc(-1 * (var(--start-angle, 0deg) + 360deg)));
		}
	}

	@keyframes kurzgesagt-moon-shimmer {
		0%, 100% { 
			filter: brightness(1) saturate(1) hue-rotate(0deg);
			transform: scale(1);
		}
		33% { 
			filter: brightness(1.2) saturate(1.3) hue-rotate(10deg);
			transform: scale(1.02);
		}
		66% { 
			filter: brightness(1.1) saturate(1.2) hue-rotate(5deg);
			transform: scale(1.01);
		}
	}

	/* Universal Gentle Bounce - Kurzgesagt's signature bouncy movement */
	@keyframes kurzgesagt-gentle-bounce {
		0%, 100% { 
			transform: translateY(0px);
		}
		25% { 
			transform: translateY(-8px);
		}
		50% { 
			transform: translateY(-12px);
		}
		75% { 
			transform: translateY(-6px);
		}
	}

	/* Kurzgesagt Space Background Animations */
	@keyframes kurzgesagt-space-twinkle {
		0%, 100% { 
			filter: brightness(1) saturate(1.2) contrast(1.1);
			opacity: 0.8;
		}
		25% { 
			filter: brightness(1.3) saturate(1.5) contrast(1.3);
			opacity: 0.9;
		}
		50% { 
			filter: brightness(1.5) saturate(1.8) contrast(1.5);
			opacity: 1;
		}
		75% { 
			filter: brightness(1.2) saturate(1.4) contrast(1.2);
			opacity: 0.85;
		}
	}

	@keyframes kurzgesagt-space-drift {
		0% { background-position: 0% 0%, 20% 20%, 40% 40%, 60% 60%; }
		25% { background-position: 10% 5%, 30% 25%, 50% 45%, 70% 65%; }
		50% { background-position: 20% 10%, 40% 30%, 60% 50%, 80% 70%; }
		75% { background-position: 30% 15%, 50% 35%, 70% 55%, 90% 75%; }
		100% { background-position: 40% 20%, 60% 40%, 80% 60%, 100% 80%; }
	}

	/* Gentle space drift animation */
	@keyframes kurzgesagt-space-gentle-drift {
		0%, 100% { 
			transform: translateX(0px) translateY(0px);
		}
		25% { 
			transform: translateX(2px) translateY(-1px);
		}
		50% { 
			transform: translateX(-1px) translateY(2px);
		}
		75% { 
			transform: translateX(1px) translateY(1px);
		}
	}

	/* Kurzgesagt Glow Animations */
	@keyframes kurzgesagt-glow-pulse {
		0%, 100% { 
			transform: scale(1);
			opacity: 0.7;
		}
		50% { 
			transform: scale(1.1);
			opacity: 1;
		}
	}

	@keyframes kurzgesagt-blackhole-glow {
		0%, 100% { 
			transform: scale(1) rotate(0deg);
			filter: blur(2px) brightness(1);
		}
		33% { 
			transform: scale(1.2) rotate(120deg);
			filter: blur(3px) brightness(1.3);
		}
		66% { 
			transform: scale(1.1) rotate(240deg);
			filter: blur(2.5px) brightness(1.1);
		}
	}

	@keyframes kurzgesagt-star-glow {
		0%, 100% { 
			transform: scale(1);
			filter: blur(1px) brightness(1);
		}
		25% { 
			transform: scale(1.3);
			filter: blur(2px) brightness(1.5);
		}
		75% { 
			transform: scale(1.1);
			filter: blur(1.5px) brightness(1.2);
		}
	}

	@keyframes kurzgesagt-planet-glow {
		0%, 100% { 
			transform: scale(1);
			filter: blur(2px) brightness(1) hue-rotate(0deg);
		}
		50% { 
			transform: scale(1.15);
			filter: blur(3px) brightness(1.2) hue-rotate(15deg);
		}
	}

	@keyframes kurzgesagt-moon-glow {
		0%, 100% { 
			transform: scale(1);
			filter: blur(1px) brightness(1) saturate(1);
		}
		50% { 
			transform: scale(1.05);
			filter: blur(2px) brightness(1.1) saturate(1.3);
		}
	}

	/* Kurzgesagt Black Hole Swirl Animation */
	@keyframes kurzgesagt-blackhole-swirl {
		0% { 
			transform: rotate(0deg) scale(1);
			opacity: 0.7;
		}
		25% { 
			transform: rotate(90deg) scale(1.1);
			opacity: 0.9;
		}
		50% { 
			transform: rotate(180deg) scale(0.9);
			opacity: 1;
		}
		75% { 
			transform: rotate(270deg) scale(1.05);
			opacity: 0.8;
		}
		100% { 
			transform: rotate(360deg) scale(1);
			opacity: 0.7;
		}
	}

	/* Override floating animation for orbiting bodies to work with orbital transforms */
	.celestial-blackhole {
		animation: blackhole-pulse 6s ease-in-out infinite, blackhole-gravity 8s ease-in-out infinite alternate;
		position: absolute;
		z-index: 20;
	}

	.celestial-star {
		animation: planet-orbit var(--orbital-period, 30s) infinite linear;
	}

	.celestial-planet {
		animation: planet-orbit var(--orbital-period, 50s) infinite linear;
	}

	.celestial-moon {
		animation: moon-orbit var(--orbital-period, 70s) infinite linear;
	}

	/* Contributor Orb */
	.contributor-orb {
		position: relative;
		width: 60px;
		height: 60px;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Celestial Type Specific Orb Sizes */
	.celestial-blackhole .contributor-orb {
		width: 100px;  /* Largest - Black Hole */
		height: 100px;
	}

	.celestial-star .contributor-orb,
	.celestial-sun .contributor-orb {
		width: 80px;   /* Second largest - Stars/Suns */
		height: 80px;
	}

	.celestial-planet .contributor-orb {
		width: 60px;   /* Third largest - Planets */
		height: 60px;
	}

	.celestial-moon .contributor-orb {
		width: 40px;   /* Smallest - Moons */
		height: 40px;
	}

	.floating-contributor.large .contributor-orb {
		width: 80px;
		height: 80px;
	}

	.orb-glow {
		position: absolute;
		inset: -8px;
		background: radial-gradient(circle, rgba(255, 224, 102, 0.7) 0%, rgba(255, 107, 107, 0.4) 40%, transparent 70%);
		border-radius: 50%;
		animation: kurzgesagt-glow-pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
		filter: blur(2px);
	}

	/* Kurzgesagt-style Celestial Type Specific Glows */
	.celestial-blackhole .orb-glow {
		background: radial-gradient(circle, 
			rgba(255, 140, 0, 0.9) 0%, 
			rgba(147, 51, 234, 0.6) 30%, 
			rgba(139, 92, 246, 0.4) 50%, 
			transparent 70%);
		inset: -15px;
		animation: kurzgesagt-blackhole-glow 4s cubic-bezier(0.25, 0.46, 0.45, 0.94) infinite;
	}

	.celestial-star .orb-glow {
		background: radial-gradient(circle, 
			rgba(255, 224, 102, 1) 0%, 
			rgba(255, 107, 107, 0.8) 30%, 
			rgba(255, 193, 7, 0.5) 50%, 
			transparent 70%);
		inset: -12px;
		animation: kurzgesagt-star-glow 2.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite;
	}

	.celestial-planet .orb-glow {
		background: radial-gradient(circle, 
			rgba(69, 183, 209, 0.9) 0%, 
			rgba(78, 205, 196, 0.6) 40%, 
			rgba(45, 183, 245, 0.4) 60%, 
			transparent 75%);
		inset: -10px;
		animation: kurzgesagt-planet-glow 3.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) infinite;
	}

	.celestial-moon .orb-glow {
		background: radial-gradient(circle, 
			rgba(150, 206, 180, 0.8) 0%, 
			rgba(255, 234, 167, 0.5) 40%, 
			rgba(220, 231, 117, 0.3) 60%, 
			transparent 75%);
		inset: -8px;
		animation: kurzgesagt-moon-glow 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;
	}

	@keyframes blackhole-swirl {
		0% { transform: rotate(0deg) scale(1); }
		50% { transform: rotate(180deg) scale(1.2); }
		100% { transform: rotate(360deg) scale(1); }
	}

	@keyframes pulse-blackhole {
		0%, 100% { transform: scale(1) rotate(0deg); opacity: 1; }
		25% { transform: scale(1.4) rotate(90deg); opacity: 0.8; }
		50% { transform: scale(1.6) rotate(180deg); opacity: 1; }
		75% { transform: scale(1.4) rotate(270deg); opacity: 0.8; }
	}

	@keyframes pulse-star {
		0%, 100% { transform: scale(1); opacity: 0.9; }
		50% { transform: scale(1.3); opacity: 1; }
	}

	@keyframes pulse-planet {
		0%, 100% { transform: scale(1); opacity: 0.7; }
		50% { transform: scale(1.2); opacity: 0.9; }
	}

	@keyframes pulse-moon {
		0%, 100% { transform: scale(1); opacity: 0.5; }
		50% { transform: scale(1.1); opacity: 0.7; }
	}

	.floating-contributor.large .orb-glow {
		background: radial-gradient(circle, rgba(251, 191, 36, 0.8) 0%, rgba(251, 191, 36, 0.3) 40%, transparent 70%);
	}

	@keyframes pulse-glow {
		0%, 100% { transform: scale(1); opacity: 0.6; }
		50% { transform: scale(1.2); opacity: 1; }
	}

	.orb-core {
		position: absolute;
		inset: 4px;
		background: linear-gradient(135deg, rgba(139, 92, 246, 0.8), rgba(59, 130, 246, 0.8));
		border-radius: 50%;
		padding: 4px;
		backdrop-filter: blur(10px);
		border: 2px solid rgba(255, 255, 255, 0.2);
		overflow: hidden;
	}

	/* Kurzgesagt-style Celestial Type Specific Core Styles */
	.celestial-blackhole .orb-core {
		background: radial-gradient(circle, 
			rgba(139, 92, 246, 0.9) 0%, 
			rgba(59, 130, 246, 0.8) 30%, 
			rgba(147, 51, 234, 0.7) 60%, 
			rgba(139, 92, 246, 0.6) 100%);
		border: 3px solid rgba(139, 92, 246, 0.8);
		box-shadow: 
			0 0 20px rgba(139, 92, 246, 0.6),
			0 0 40px rgba(147, 51, 234, 0.4);
		position: relative;
		overflow: visible;
	}

	.celestial-blackhole .orb-core::before {
		content: '';
		position: absolute;
		inset: -50%;
		background: radial-gradient(circle, 
			transparent 0%, 
			rgba(75, 20, 99, 0.4) 30%, 
			rgba(107, 33, 168, 0.6) 50%, 
			rgba(59, 7, 100, 0.5) 70%, 
			transparent 100%);
		border-radius: 50%;
		animation: accretion-disk-spin 12s linear infinite;
		z-index: -1;
	}

	.celestial-blackhole .orb-core::after {
		content: '';
		position: absolute;
		inset: -100%;
		background: conic-gradient(
			from 0deg,
			transparent 0deg,
			rgba(30, 10, 60, 0.3) 45deg,
			rgba(75, 20, 99, 0.4) 90deg,
			rgba(30, 10, 60, 0.3) 135deg,
			transparent 180deg,
			rgba(59, 7, 100, 0.3) 225deg,
			rgba(75, 20, 99, 0.4) 270deg,
			rgba(30, 10, 60, 0.3) 315deg,
			transparent 360deg
		);
		border-radius: 50%;
		animation: gravitational-field-spin 20s linear infinite;
		z-index: -2;
		filter: blur(8px);
	}

	.celestial-star .orb-core {
		background: linear-gradient(135deg, 
			rgba(255, 224, 102, 1) 0%, 
			rgba(255, 193, 7, 0.95) 30%, 
			rgba(255, 107, 107, 0.9) 70%, 
			rgba(255, 152, 0, 0.85) 100%);
		border: 3px solid rgba(255, 255, 255, 0.6);
		box-shadow: 
			inset 0 0 20px rgba(255, 224, 102, 0.4),
			0 0 25px rgba(255, 224, 102, 0.6),
			0 0 40px rgba(255, 107, 107, 0.4);
	}

	.celestial-planet .orb-core {
		background: linear-gradient(135deg, 
			rgba(69, 183, 209, 0.95) 0%, 
			rgba(78, 205, 196, 0.9) 50%, 
			rgba(45, 183, 245, 0.85) 100%);
		border: 2px solid rgba(255, 255, 255, 0.5);
		box-shadow: 
			inset 0 0 15px rgba(69, 183, 209, 0.3),
			0 0 20px rgba(78, 205, 196, 0.5);
	}

	.celestial-moon .orb-core {
		background: linear-gradient(135deg, 
			rgba(150, 206, 180, 0.9) 0%, 
			rgba(255, 234, 167, 0.8) 50%, 
			rgba(220, 231, 117, 0.75) 100%);
		border: 2px solid rgba(255, 255, 255, 0.4);
		box-shadow: 
			inset 0 0 10px rgba(150, 206, 180, 0.2),
			0 0 15px rgba(255, 234, 167, 0.4);
	}

	.floating-contributor.large .orb-core {
		background: linear-gradient(135deg, rgba(251, 191, 36, 0.9), rgba(249, 115, 22, 0.8));
		border: 3px solid rgba(255, 255, 255, 0.3);
	}

	.avatar-img {
		width: 100%;
		height: 100%;
		border-radius: 50%;
		object-fit: cover;
		transition: transform 0.3s ease;
	}

	.core-ring {
		position: absolute;
		inset: -6px;
		border: 2px solid rgba(251, 191, 36, 0.6);
		border-radius: 50%;
		animation: rotate-ring 10s linear infinite;
	}

	.core-ring::before {
		content: '';
		position: absolute;
		top: -4px;
		left: 50%;
		transform: translateX(-50%);
		width: 8px;
		height: 8px;
		background: rgba(251, 191, 36, 1);
		border-radius: 50%;
		box-shadow: 0 0 10px rgba(251, 191, 36, 0.8);
	}

	@keyframes rotate-ring {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	/* Floating Info Card */
	.contributor-card {
		position: absolute;
		top: -180px;
		left: -120px;
		width: 300px;
		background: rgba(0, 0, 0, 0.95);
		backdrop-filter: blur(20px);
		border: 1px solid rgba(139, 92, 246, 0.3);
		border-radius: 16px;
		padding: 20px;
		opacity: 0;
		visibility: hidden;
		transform: translateY(20px) scale(0.9);
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
		z-index: 100;
		box-shadow: 
			0 20px 40px rgba(0, 0, 0, 0.4),
			inset 0 1px 2px rgba(255, 255, 255, 0.1);
	}

	/* Celestial-specific card sizing */
	.celestial-blackhole .contributor-card {
		width: 350px;
		left: -140px;
		top: -200px;
		padding: 25px;
	}

	.celestial-star .contributor-card,
	.celestial-sun .contributor-card {
		width: 320px;
		left: -130px;
		top: -190px;
		padding: 22px;
	}

	.celestial-planet .contributor-card {
		width: 300px;
		left: -120px;
		top: -180px;
		padding: 20px;
	}

	.celestial-moon .contributor-card {
		width: 280px;
		left: -110px;
		top: -170px;
		padding: 18px;
	}

	.floating-contributor:hover .contributor-card {
		opacity: 1;
		visibility: visible;
		transform: translateY(0) scale(1);
	}

	.floating-contributor:hover .contributor-orb {
		transform: scale(1.1);
	}

	.floating-contributor:hover .avatar-img {
		transform: scale(1.1);
	}

	/* Stat Bars */
	.stat-bar {
		display: flex;
		align-items: center;
		gap: 8px;
	}

	.bar-container {
		flex: 1;
		height: 6px;
		background: rgba(255, 255, 255, 0.1);
		border-radius: 3px;
		overflow: hidden;
		position: relative;
		display: flex;
		align-items: center;
	}

	.bar-fill {
		height: 100%;
		border-radius: 3px;
		transition: width 1s ease-out;
		animation: fill-bar 2s ease-out;
	}

	@keyframes fill-bar {
		0% { width: 0%; }
	}

	.commits-bar {
		background: linear-gradient(90deg, rgba(139, 92, 246, 1), rgba(139, 92, 246, 0.6));
		box-shadow: 0 0 8px rgba(139, 92, 246, 0.4);
	}

	.prs-bar {
		background: linear-gradient(90deg, rgba(59, 130, 246, 1), rgba(59, 130, 246, 0.6));
		box-shadow: 0 0 8px rgba(59, 130, 246, 0.4);
	}

	/* Contribution Particles */
	.contribution-particles {
		position: absolute;
		inset: 0;
		pointer-events: none;
	}

	.contrib-particle {
		position: absolute;
		width: 4px;
		height: 4px;
		background: radial-gradient(circle, rgba(139, 92, 246, 1) 0%, transparent 70%);
		border-radius: 50%;
		animation: particle-burst 3s ease-out infinite;
	}

	/* Celestial Type Specific Particles */
	.celestial-star .contrib-particle {
		background: radial-gradient(circle, rgba(251, 191, 36, 1) 0%, transparent 70%);
		width: 6px;
		height: 6px;
		box-shadow: 0 0 8px rgba(251, 191, 36, 0.6);
	}

	.celestial-planet .contrib-particle {
		background: radial-gradient(circle, rgba(59, 130, 246, 1) 0%, transparent 70%);
		width: 5px;
		height: 5px;
		box-shadow: 0 0 6px rgba(59, 130, 246, 0.4);
	}

	.celestial-moon .contrib-particle {
		background: radial-gradient(circle, rgba(156, 163, 175, 1) 0%, transparent 70%);
		width: 3px;
		height: 3px;
		box-shadow: 0 0 4px rgba(156, 163, 175, 0.3);
	}

	.contrib-particle:nth-child(1) { 
		top: 10%;
		left: 10%;
		animation-delay: 0s;
	}
	.contrib-particle:nth-child(2) { 
		top: 20%;
		right: 10%;
		animation-delay: 0.3s;
	}
	.contrib-particle:nth-child(3) { 
		bottom: 20%;
		left: 20%;
		animation-delay: 0.6s;
	}
	.contrib-particle:nth-child(4) { 
		bottom: 10%;
		right: 20%;
		animation-delay: 0.9s;
	}

	@keyframes particle-burst {
		0% {
			transform: scale(0) rotate(0deg);
			opacity: 1;
		}
		50% {
			transform: scale(1) rotate(180deg);
			opacity: 0.8;
		}
		100% {
			transform: scale(0) rotate(360deg);
			opacity: 0;
		}
	}

	/* Connection Lines */
	.connection-line {
		stroke: rgba(139, 92, 246, 0.3);
		stroke-width: 1;
		fill: none;
		opacity: 0;
		transition: opacity 0.5s ease;
		animation: draw-line 2s ease-out;
	}

	@keyframes draw-line {
		0% { stroke-dasharray: 1000; stroke-dashoffset: 1000; }
		100% { stroke-dasharray: 1000; stroke-dashoffset: 0; }
	}

	/* Responsive Design */
	@media (max-width: 768px) {
		.galaxy-container {
			height: 400px !important;
		}
		
		.floating-contributor {
			animation: gentle-float 4s ease-in-out infinite alternate !important;
			position: relative !important;
			display: inline-block;
			margin: 10px;
		}
		
		.floating-contributor::before {
			display: none; /* Hide orbital paths on mobile */
		}
		
		.celestial-star:hover::after,
		.celestial-planet:hover::after {
			display: none; /* Hide gravitational fields on mobile */
		}
		
		.contributor-card {
			position: fixed;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			width: 90vw;
			max-width: 320px;
		}
		
		/* Arrange contributors in a simple grid on mobile */
		.floating-contributor {
			position: relative !important;
			left: auto !important;
			top: auto !important;
			display: inline-flex;
			margin: 8px;
		}
		
		/* Reset all animations on mobile */
		.celestial-planet,
		.celestial-moon {
			animation: gentle-float 4s ease-in-out infinite alternate !important;
		}
	}

	@media (max-width: 480px) {
		.galaxy-container {
			height: 300px !important;
		}
		
		.celestial-star .contributor-orb {
			width: 60px;
			height: 60px;
		}
		
		.celestial-planet .contributor-orb {
			width: 50px;
			height: 50px;
		}
		
		.celestial-moon .contributor-orb {
			width: 40px;
			height: 40px;
		}
	}

	/* Enhanced Hover Effects */
	.floating-contributor:hover {
		z-index: 200;
	}

	/* Black Hole Gravitational Field Effect */
	.celestial-blackhole::before {
		content: '';
		position: absolute;
		inset: -200%;
		background: radial-gradient(circle, 
			transparent 0%, 
			rgba(30, 10, 60, 0.15) 20%, 
			rgba(75, 20, 99, 0.2) 40%, 
			rgba(30, 10, 60, 0.1) 60%, 
			transparent 80%);
		border-radius: 50%;
		animation: gravitational-waves 15s ease-in-out infinite;
		z-index: -3;
		pointer-events: none;
	}

	@keyframes gravitational-waves {
		0%, 100% { 
			transform: scale(1) rotate(0deg); 
			opacity: 0.6;
		}
		25% { 
			transform: scale(1.2) rotate(90deg); 
			opacity: 0.8;
		}
		50% { 
			transform: scale(1.4) rotate(180deg); 
			opacity: 1;
		}
		75% { 
			transform: scale(1.2) rotate(270deg); 
			opacity: 0.8;
		}
	}

	.floating-contributor:hover .orb-glow {
		animation-duration: 1s;
		transform: scale(1.5);
	}

	.floating-contributor:hover .contrib-particle {
		animation-duration: 1s;
	}

	/* Orbital path visualization with improved clarity */
	.floating-contributor::before {
		content: '';
		position: absolute;
		border: 1px dashed rgba(255, 255, 255, 0.1);
		border-radius: 50%;
		opacity: 0;
		transition: opacity 0.3s ease;
		pointer-events: none;
		z-index: -1;
	}

	.celestial-planet::before {
		width: calc(var(--orbit-radius, 0px) * 2);
		height: calc(var(--orbit-radius, 0px) * 2);
		left: calc(-1 * var(--orbit-radius, 0px));
		top: calc(-1 * var(--orbit-radius, 0px));
		border-color: rgba(59, 130, 246, 0.3);
		border-width: 1px;
	}

	.celestial-moon::before {
		width: calc(var(--orbit-radius, 0px) * 2);
		height: calc(var(--orbit-radius, 0px) * 2);
		left: calc(-1 * var(--orbit-radius, 0px));
		top: calc(-1 * var(--orbit-radius, 0px));
		border-color: rgba(156, 163, 175, 0.3);
		border-width: 1px;
	}

	.floating-contributor:hover::before {
		opacity: 1;
	}

	/* Enhanced orbital paths showing gravitational influence */
	.celestial-blackhole::before {
		width: 400px;
		height: 400px;
		left: -200px;
		top: -200px;
		border-color: rgba(139, 92, 246, 0.4);
		border-width: 3px;
		border-style: solid;
		background: radial-gradient(circle, transparent 70%, rgba(139, 92, 246, 0.1) 85%, transparent 100%);
		animation: blackhole-field 6s ease-in-out infinite;
	}

	.celestial-star::before {
		width: 200px;
		height: 200px;
		left: -100px;
		top: -100px;
		border-color: rgba(251, 191, 36, 0.2);
		border-width: 2px;
		border-style: dotted;
	}

	@keyframes blackhole-field {
		0%, 100% { 
			transform: scale(1) rotate(0deg); 
			opacity: 0.3; 
		}
		50% { 
			transform: scale(1.1) rotate(180deg); 
			opacity: 0.6; 
		}
	}

	/* Gravitational field effect */
	.celestial-star:hover::after,
	.celestial-planet:hover::after {
		content: '';
		position: absolute;
		border-radius: 50%;
		background: radial-gradient(circle, transparent 60%, rgba(251, 191, 36, 0.1) 80%, transparent 100%);
		animation: gravitational-pulse 2s ease-in-out infinite;
		pointer-events: none;
		z-index: -1;
	}

	.celestial-star:hover::after {
		width: 300px;
		height: 300px;
		left: -150px;
		top: -150px;
		background: radial-gradient(circle, transparent 60%, rgba(251, 191, 36, 0.15) 80%, transparent 100%);
	}

	.celestial-planet:hover::after {
		width: 200px;
		height: 200px;
		left: -100px;
		top: -100px;
		background: radial-gradient(circle, transparent 60%, rgba(59, 130, 246, 0.1) 80%, transparent 100%);
	}

	@keyframes gravitational-pulse {
		0%, 100% { transform: scale(0.8); opacity: 0.5; }
		50% { transform: scale(1.2); opacity: 0.8; }
	}

	/* Card Content Styling */
	.card-content {
		position: relative;
		z-index: 1;
	}

	.card-content::before {
		content: '';
		position: absolute;
		inset: -20px;
		background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), transparent);
		border-radius: 16px;
		z-index: -1;
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const playBtn = document.getElementById('play-galaxy') as HTMLButtonElement;
		const connectBtn = document.getElementById('connect-contributors') as HTMLButtonElement;
		const contributors = document.querySelectorAll('.floating-contributor') as NodeListOf<HTMLElement>;
		const connectionSvg = document.getElementById('connection-lines') as SVGElement | null;
		
		let isAnimating = true;
		let showConnections = false;

		// Set up orbital mechanics - no complex calculations needed
		// CSS animations with custom properties handle the orbits
		contributors.forEach((contributor) => {
			const orbitRadius = contributor.dataset.orbitRadius;
			if (orbitRadius) {
				contributor.style.setProperty('--orbit-radius', `${orbitRadius}px`);
			}
		});

		// Add gravitational pull effect - when hovering over a massive body, nearby objects get attracted
		contributors.forEach((contributor) => {
			const celestialType = contributor.dataset.celestialType;
			
			if (celestialType === 'star' || celestialType === 'sun' || celestialType === 'planet') {
				contributor.addEventListener('mouseenter', () => {
					// Find nearby contributors and create attraction effect
					const contributorRect = contributor.getBoundingClientRect();
					// Adjust attraction radius based on celestial type and new sizes
					let attractionRadius = 80; // Default for smaller bodies
					if (celestialType === 'star' || celestialType === 'sun') {
						attractionRadius = 120; // Stars have stronger gravitational pull
					} else if (celestialType === 'planet') {
						attractionRadius = 100; // Planets have medium pull
					}
					
					contributors.forEach((other) => {
						if (other === contributor) return;
						
						const otherRect = other.getBoundingClientRect();
						const distance = Math.sqrt(
							Math.pow(contributorRect.left - otherRect.left, 2) + 
							Math.pow(contributorRect.top - otherRect.top, 2)
						);
						
						if (distance < attractionRadius) {
							other.style.transform += ` scale(1.1)`;
							other.style.transition = 'transform 0.3s ease';
						}
					});
				});
				
				contributor.addEventListener('mouseleave', () => {
					// Reset attraction effect
					contributors.forEach((other) => {
						if (other === contributor) return;
						other.style.transform = other.style.transform.replace(/ scale\([^)]*\)/g, '');
					});
				});
			}
		});

		// Galaxy Animation Control
		playBtn?.addEventListener('click', () => {
			isAnimating = !isAnimating;
			
			contributors.forEach(contributor => {
				if (isAnimating) {
					contributor.style.animationPlayState = 'running';
					playBtn.innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path d="M6 4v12l8-6-8-6z"/></svg> Animate';
				} else {
					contributor.style.animationPlayState = 'paused';
					playBtn.innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path d="M6 4h2v12H6V4zm6 0h2v12h-2V4z"/></svg> Resume';
				}
			});
		});

		// Connection Lines
		connectBtn?.addEventListener('click', () => {
			showConnections = !showConnections;
			
			if (showConnections) {
				drawConnections();
				connectBtn.innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/></svg> Disconnect';
			} else {
				clearConnections();
				connectBtn.innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path d="M13.828 10.172a4 4 0 00-5.656 0l-.708-.708a5 5 0 017.072 0l-.708.708zm-1.414 1.414a2 2 0 00-2.828 0l-.708-.708a3 3 0 014.243 0l-.707.708zm-4.243.708a1 1 0 011.414 0l.707.708a1 1 0 11-1.414 1.414L8.17 13.414a1 1 0 010-1.414z"/></svg> Connect';
			}
		});

		function drawConnections() {
			if (!connectionSvg) return;
			clearConnections();
			
			const contributorPositions = Array.from(contributors).map(contrib => {
				const rect = contrib.getBoundingClientRect();
				const svgRect = connectionSvg!.getBoundingClientRect();
				return {
					x: rect.left - svgRect.left + rect.width / 2,
					y: rect.top - svgRect.top + rect.height / 2,
					element: contrib
				};
			});

			// Draw lines between contributors
			for (let i = 0; i < contributorPositions.length; i++) {
				for (let j = i + 1; j < contributorPositions.length; j++) {
					const pos1 = contributorPositions[i];
					const pos2 = contributorPositions[j];
					
					if (pos1 && pos2) {
						const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
						line.setAttribute('x1', pos1.x.toString());
						line.setAttribute('y1', pos1.y.toString());
						line.setAttribute('x2', pos2.x.toString());
						line.setAttribute('y2', pos2.y.toString());
						line.setAttribute('class', 'connection-line');
						
						connectionSvg!.appendChild(line);
						
						// Animate line appearance
						setTimeout(() => {
							(line as any).style.opacity = '0.6';
						}, (i + j) * 100);
					}
				}
			}
		}

		function clearConnections() {
			if (!connectionSvg) return;
			connectionSvg.innerHTML = '';
		}

		// Enhanced hover effects with particle burst
		contributors.forEach((contributor, index) => {
			const particles = contributor.querySelectorAll('.contrib-particle') as NodeListOf<HTMLElement>;
			
			contributor.addEventListener('mouseenter', () => {
				// Trigger particle burst
				if (particles) {
					particles.forEach((particle, i) => {
						particle.style.animationDelay = `${i * 0.1}s`;
						particle.style.animationDuration = '1s';
					});
				}
				
				// Enhanced glow effect
				const orb = contributor.querySelector('.orb-glow') as HTMLElement;
				if (orb) {
					orb.style.transform = 'scale(1.8)';
					orb.style.opacity = '1';
				}

				// Ripple effect
				createRipple(contributor);
			});

			contributor.addEventListener('mouseleave', () => {
				// Reset effects
				if (particles) {
					particles.forEach(particle => {
						particle.style.animationDuration = '3s';
					});
				}
				
				const orb = contributor.querySelector('.orb-glow') as HTMLElement;
				if (orb) {
					orb.style.transform = 'scale(1.2)';
					orb.style.opacity = '0.6';
				}
			});
		});

		function createRipple(element: HTMLElement) {
			const ripple = document.createElement('div');
			ripple.style.cssText = `
				position: absolute;
				border-radius: 50%;
				background: radial-gradient(circle, rgba(139, 92, 246, 0.3) 0%, transparent 70%);
				transform: scale(0);
				animation: ripple-effect 1s ease-out;
				pointer-events: none;
				inset: -20px;
				z-index: 1;
			`;
			
			element.appendChild(ripple);
			
			setTimeout(() => {
				ripple.remove();
			}, 1000);
		}

		// Add dynamic CSS for ripple animation
		const style = document.createElement('style');
		style.textContent = `
			@keyframes ripple-effect {
				0% {
					transform: scale(0);
					opacity: 1;
				}
				100% {
					transform: scale(2);
					opacity: 0;
				}
			}
		`;
		document.head.appendChild(style);

		// Parallax effect for particles
		document.addEventListener('mousemove', (e) => {
			const particles = document.querySelectorAll('.particle') as NodeListOf<HTMLElement>;
			const mouseX = e.clientX / window.innerWidth;
			const mouseY = e.clientY / window.innerHeight;
			
			particles.forEach((particle, index) => {
				const speed = (index % 3 + 1) * 0.5;
				const x = (mouseX - 0.5) * speed * 20;
				const y = (mouseY - 0.5) * speed * 20;
				
				particle.style.transform = `translate(${x}px, ${y}px)`;
			});
		});

		// Auto-rotate contributors when not interacting
		let autoRotateInterval: ReturnType<typeof setInterval>;
		let lastInteraction = Date.now();

		function startAutoRotate() {
			autoRotateInterval = setInterval(() => {
				if (Date.now() - lastInteraction > 3000) { // 3 seconds of no interaction
					contributors.forEach((contributor, index) => {
						const delay = index * 200;
						setTimeout(() => {
							if (!contributor.matches(':hover')) {
								contributor.style.transform += ' scale(1.05)';
								setTimeout(() => {
									contributor.style.transform = contributor.style.transform.replace(' scale(1.05)', '');
								}, 300);
							}
						}, delay);
					});
				}
			}, 5000);
		}

		function stopAutoRotate() {
			clearInterval(autoRotateInterval);
			lastInteraction = Date.now();
		}

		// Track user interactions
		document.addEventListener('mousemove', stopAutoRotate);
		document.addEventListener('click', stopAutoRotate);
		document.addEventListener('scroll', stopAutoRotate);

		// Start auto-rotate
		startAutoRotate();

		// Intersection Observer for entrance animations
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry, index) => {
				if (entry.isIntersecting) {
					setTimeout(() => {
						const target = entry.target as HTMLElement;
						target.style.opacity = '1';
						target.style.transform = 'translateY(0)';
					}, index * 100);
				}
			});
		}, { threshold: 0.1 });

		contributors.forEach(contributor => {
			contributor.style.opacity = '0';
			contributor.style.transform = 'translateY(50px)';
			contributor.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
			observer.observe(contributor);
		});
	});

	// Galaxy Exploration Controls
	document.addEventListener('DOMContentLoaded', () => {
		const galaxySpace = document.getElementById('galaxy-space') as HTMLElement;
		const zoomInBtn = document.getElementById('zoom-in') as HTMLButtonElement;
		const zoomOutBtn = document.getElementById('zoom-out') as HTMLButtonElement;
		const resetViewBtn = document.getElementById('reset-view') as HTMLButtonElement;
		
		if (!galaxySpace) return;

		let scale = 1;
		let translateX = 0;
		let translateY = 0;
		let isDragging = false;
		let startX = 0;
		let startY = 0;
		let initialTranslateX = 0;
		let initialTranslateY = 0;

		const minScale = 0.5;
		const maxScale = 3;
		const scalStep = 0.2;

		function updateTransform() {
			galaxySpace.style.transform = `scale(${scale}) translate(${translateX}px, ${translateY}px)`;
		}

		// Zoom controls
		zoomInBtn?.addEventListener('click', () => {
			if (scale < maxScale) {
				scale = Math.min(maxScale, scale + scalStep);
				updateTransform();
			}
		});

		zoomOutBtn?.addEventListener('click', () => {
			if (scale > minScale) {
				scale = Math.max(minScale, scale - scalStep);
				updateTransform();
			}
		});

		resetViewBtn?.addEventListener('click', () => {
			scale = 1;
			translateX = 0;
			translateY = 0;
			galaxySpace.style.transition = 'transform 0.5s ease-out';
			updateTransform();
			setTimeout(() => {
				galaxySpace.style.transition = 'transform 0.3s ease-out';
			}, 500);
		});

		// Mouse wheel zoom
		galaxySpace.addEventListener('wheel', (e) => {
			e.preventDefault();
			const delta = e.deltaY > 0 ? -scalStep : scalStep;
			const newScale = Math.max(minScale, Math.min(maxScale, scale + delta));
			
			if (newScale !== scale) {
				scale = newScale;
				updateTransform();
			}
		});

		// Drag to pan
		galaxySpace.addEventListener('mousedown', (e) => {
			isDragging = true;
			startX = e.clientX;
			startY = e.clientY;
			initialTranslateX = translateX;
			initialTranslateY = translateY;
			galaxySpace.style.cursor = 'grabbing';
			galaxySpace.style.transition = 'none';
		});

		document.addEventListener('mousemove', (e) => {
			if (!isDragging) return;
			
			const deltaX = (e.clientX - startX) / scale;
			const deltaY = (e.clientY - startY) / scale;
			
			translateX = initialTranslateX + deltaX;
			translateY = initialTranslateY + deltaY;
			
			updateTransform();
		});

		document.addEventListener('mouseup', () => {
			if (isDragging) {
				isDragging = false;
				galaxySpace.style.cursor = 'grab';
				galaxySpace.style.transition = 'transform 0.3s ease-out';
			}
		});

		// Touch support for mobile
		let touchStartDistance = 0;
		let touchStartScale = 1;

		galaxySpace.addEventListener('touchstart', (e) => {
			if (e.touches.length === 1 && e.touches[0]) {
				// Single touch - pan
				isDragging = true;
				startX = e.touches[0].clientX;
				startY = e.touches[0].clientY;
				initialTranslateX = translateX;
				initialTranslateY = translateY;
				galaxySpace.style.transition = 'none';
			} else if (e.touches.length === 2 && e.touches[0] && e.touches[1]) {
				// Pinch zoom
				const touch1 = e.touches[0];
				const touch2 = e.touches[1];
				touchStartDistance = Math.hypot(
					touch2.clientX - touch1.clientX,
					touch2.clientY - touch1.clientY
				);
				touchStartScale = scale;
			}
			e.preventDefault();
		});

		galaxySpace.addEventListener('touchmove', (e) => {
			if (e.touches.length === 1 && isDragging && e.touches[0]) {
				// Pan
				const deltaX = (e.touches[0].clientX - startX) / scale;
				const deltaY = (e.touches[0].clientY - startY) / scale;
				
				translateX = initialTranslateX + deltaX;
				translateY = initialTranslateY + deltaY;
				
				updateTransform();
			} else if (e.touches.length === 2 && e.touches[0] && e.touches[1]) {
				// Pinch zoom
				const touch1 = e.touches[0];
				const touch2 = e.touches[1];
				const currentDistance = Math.hypot(
					touch2.clientX - touch1.clientX,
					touch2.clientY - touch1.clientY
				);
				
				if (touchStartDistance > 0) {
					const newScale = Math.max(minScale, Math.min(maxScale, 
						touchStartScale * (currentDistance / touchStartDistance)
					));
					scale = newScale;
					updateTransform();
				}
			}
			e.preventDefault();
		});

		galaxySpace.addEventListener('touchend', () => {
			isDragging = false;
			touchStartDistance = 0;
			galaxySpace.style.transition = 'transform 0.3s ease-out';
		});
	});
</script>
</PageLayout>
